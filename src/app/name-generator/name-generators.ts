import { NameGenerator } from './name-generator';
import { LocalNameGenerator } from './local-name-generator';

// Randomly returns one of values from provided array
export class ArrayNameGenerator extends LocalNameGenerator {

  constructor(private array : string[]) { super(); }

  generateSingle() : string {
    return this.array[this.getRandomInt(0, this.array.length - 1)];
  }
}

// Capitalizes first letter of string generated by wrapped NameGenerator instance
export class CapitalizeNameGenerator extends LocalNameGenerator {

    constructor(
        private _base: NameGenerator
    ) {
        super();
    }

    generateSingle(): string {
        let base = this._base.generateSingle();
        return base.charAt(0).toUpperCase() + base.slice(1);
    }
}

// Wraps multiple NameGenerator instances and joins their results with separator
export class PartsNameGenerator extends LocalNameGenerator {
  constructor(
    private _parts : NameGenerator[],
    private _separator : string = ""
  ) {
    super();
  }

  generateSingle() : string {
    let results : string[] = [];
    for (let i = 0; i < this._parts.length; i++) {
      results.push(this._parts[i].generateSingle());
    }

    return results.join(this._separator);
  }
}

// Wraps multiple instances of NameGenerator and chooses one based on provided
// probability
export class ProbabilityNameGenerator extends LocalNameGenerator {

  constructor(
    private _parts : NameGenerator[],
    private _probability : number[]
  ) {
    // TODO validate
    // TODO normalize _probability
    super();
  }

  generateSingle() : string {
    let rando = Math.random();
    let sum = 0;

    for (let i = 0; i < this._probability.length; i++) {
      sum += this._probability[i];
      if (rando < sum) {
        return this._parts[i].generateSingle();
      }
    }

    // Should not happen, but may be caused by floating point inequality problem
    return this._parts[this._probability.length - 1].generateSingle();
  }
}

// Wraps multiple NameGenerator instances and randomly uses one
export class RandomizedNameGenerator extends LocalNameGenerator {

  constructor(
    private _parts : NameGenerator[],
  ) {
    super();
  }

  generateSingle() : string {
    return this._parts[this.getRandomInt(0, this._parts.length - 1)].generateSingle();
  }
}

// Wraps single NameGenerator instance and uses its result multiple times to
// construct own result. Wraped NameGenerator instance is used between
// _minReps and _maxReps times and its results are joined using operator
export class RepetitiveNameGenerator extends LocalNameGenerator {

  constructor(
    private _base : NameGenerator,
    private _separator : string,
    private _minReps : number,
    private _maxReps : number,
  ) {
    super();
  }

  generateSingle() : string {
    let reps = this.getRandomInt(this._minReps, this._maxReps);
    let results : string[] = [];
    for (let i = 0; i < reps; i++) {
      results.push(this._base.generateSingle());
    }

    return results.join(this._separator);
  }
}

// Always returns same value
export class StaticNameGenerator extends LocalNameGenerator {

  constructor(
    private _value : string
  ) {
    super();
  }

  generateSingle() : string {
    return this._value;
  }
}
